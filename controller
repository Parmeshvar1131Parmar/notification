const { json } = require("body-parser");
const connection = require("../../config/connection");
const logger = require("../../logger/logger");
const { warn } = require("winston");

exports.notification = async (req, res) => {
  res.render("pages/notification");
};

exports.getNotifications = async (req, res) => {
  let logger_id = req.user[0][0].id;
  const [notifications] = await connection.query(
    `SELECT n.*, u.username AS username, u2.username AS related_username, t.content AS tweet_content
      FROM notifications n
      LEFT JOIN users u ON n.user_id = u.id
      LEFT JOIN users u2 ON n.related_user_id = u2.id
      LEFT JOIN tweets t ON n.tweet_id = t.id
      WHERE n.user_id = ?
      ORDER BY n.created_at DESC;`,
    [logger_id]
  );
  notifications.forEach(async (notification) => {
    switch (notification.type) {

 case 'Mention':
          // Extract mentioned usernames from tweet content using regex
          const mentionedUsernames = extractMentionedUsernames(notification.tweet_content);

          // Query users by mentioned usernames
          const mentionedUsers = await getUsersByUsernames(mentionedUsernames);

          // Assign mentioned users to the notification for frontend display
          notification.mentionedUsers = mentionedUsers;
          break;

      case "Follow":
        const [followData] = await connection.query(
          `SELECT follower.username AS follower_username, followed.username AS followed_username
          FROM followers
          JOIN users AS follower ON followers.following_id = follower.id
          JOIN users AS followed ON followers.follower_id = followed.id
          WHERE followers.follower_id = ?;`,
          [logger_id]
        );

        followData.forEach((followers) => {
          console.log(followers);
          notification.username = followers.follower_username;
          // console.log(followers.follower_username);
        });
        // notification.followed_username = followData[0].followed_username;
        break;
      case "Comment":
        const [CommentData] = await connection.query(
          "select username from users where id = ?",
          [notification.related_user_id]
        );
        notification.username = CommentData[0].username;

        break;

      case "Like":
      case "New Tweet":
      case "replay_tweet":
      case "Retweet":
        const [actionUserData] = await connection.query(
          "select username from users where id = ?",
          [notification.related_user_id]
        );
        notification.username = actionUserData[0].username;
        break;
      case "Login":
        break;
      case "Password_reset":
        break;
      default:
        console.warn("Unknwon notification type : ", notification.type);
    }
    console.log(notification);
  });

  res.status(200).json({
    notifications,
  });
};




case 'Mention':
        notificationHTML = `
          <div>
            You were mentioned by <strong>${notification.username}</strong> in a tweet:
            <div>${notification.tweet_content}</div>
          </div>
        `;
        break;

function extractMentionedUsernames(tweetContent) {
  const regex = /@(\w+)/g; // Regex to match usernames (starts with @ followed by word characters)
  const matches = tweetContent.match(regex);
  if (matches) {
    return matches.map(match => match.substring(1)); // Remove @ symbol from matches
  }
  return [];
}

// Helper function to query users by usernames
async function getUsersByUsernames(usernames) {
  if (usernames.length === 0) {
    return [];
  }
  const [users] = await connection.query('SELECT id, username FROM users WHERE username IN (?)', [usernames]);
  return users;
}

