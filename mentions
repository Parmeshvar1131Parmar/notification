
CREATE TABLE mentions (
    id INT AUTO_INCREMENT PRIMARY KEY,
    tweet_id INT NOT NULL,
    mentioned_user_id INT NOT NULL,
    FOREIGN KEY (tweet_id) REFERENCES tweets(id) ,
    FOREIGN KEY (mentioned_user_id) REFERENCES users(id) ,
    `created_at` TIMESTAMP NOT NULL DEFAULT (CURRENT_TIMESTAMP)
);

 SELECT tweets.content AS tweet_content, users.username AS author_username
      FROM mentions
      INNER JOIN tweets ON mentions.tweet_id = tweets.id
      INNER JOIN users ON tweets.user_id = users.id
      WHERE mentions.mentioned_user_id = 1;
select * from mentions; 
   
   
   
   // extract mentions from tweet contwnt
    function extractMentions(tweetContent) {
      const mentionRegex = /@([a-zA-Z0-9_]+)/g;
      const mentions = [];

      let match;
      while ((match = mentionRegex.exec(tweetContent)) !== null) {
        mentions.push(match[1]);
      }
      return mentions;
    }

    // Example usage
    const tweetContent = "Hello @john_doe and @john_doe! What's up?";
    const extractedMentions = extractMentions(tweetContent);
    console.log(extractedMentions); // Output: ['user1', 'user2']

    for (const username of extractedMentions) {
      const [rows] = await pool.query(
        "SELECT id FROM users WHERE username = ?",
        [username]
      );
      console.log(rows);
      if (rows.length > 0) {
        const mentionedUserId = rows[0].id;
        await pool.query(
          "INSERT INTO mentions (tweet_id, mentioned_user_id) VALUES (1, ?)",
          [mentionedUserId]
        );
      }
    }
    const mention = `SELECT tweets.content AS tweet_content, users.username AS author_username
      FROM mentions
      INNER JOIN tweets ON mentions.tweet_id = tweets.id
      INNER JOIN users ON tweets.user_id = users.id
      WHERE mentions.mentioned_user_id = ?`;
    const [mentionNotifications] = await pool.query(mention, 1);
    console.log(mentionNotifications);
