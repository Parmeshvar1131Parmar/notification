import mysql, { RowDataPacket, FieldPacket } from 'mysql2/promise';

interface CombinedRow<T> {
  fields: FieldPacket[];
  row: T;
}

const pool = mysql.createPool({
  host: 'localhost',
  user: 'yourUsername',
  password: 'yourPassword',
  database: 'yourDatabase',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
});

async function fetchUsers() {
  const connection = await pool.getConnection();

  try {
    // Execute a query
    const [rows, fields] = await connection.execute<User[]>('SELECT id, name, email FROM users');

    // Combine fields and rows
    const combinedResults: CombinedRow<User>[] = rows.map((row: RowDataPacket, index: number) => ({
      fields,
      row,
    }));

    // Accessing combined data
    combinedResults.forEach((combinedRow) => {
      const { fields, row } = combinedRow;
      console.log('Row:', row);
      console.log('Fields:', fields);
    });

  } catch (error) {
    console.error('Error executing query:', error);
  } finally {
    connection.release();
  }
}

fetchUsers();

