 interface User {
  id: number;
  // Add other properties as needed
}

interface NestedUserArray {
  [index: number]: User[];
}

interface RequestWithUser extends Express.Request {
  user: NestedUserArray[];
}
import { Request, Response, NextFunction } from 'express';

// Middleware to validate req.user structure
const validateUserStructure = (req: Request, res: Response, next: NextFunction) => {
  const user = (req as RequestWithUser).user;

  if (!Array.isArray(user) || !Array.isArray(user[0]) || typeof user[0][0]?.id !== 'number') {
    return res.status(400).json({ error: 'Invalid user structure' });
  }

  next();
};

export default validateUserStructure;
import express from 'express';
import validateUserStructure from './middleware/validateUserStructure';

const app = express();

app.use(express.json());

app.get('/some-route', validateUserStructure, (req: RequestWithUser, res: Response) => {
  const userId = req.user[0][0].id;
  res.send(`User ID is: ${userId}`);
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
